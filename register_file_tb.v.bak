module register_file_tb;

reg [31:0] data_input;
reg [4:0] write_register;
reg [4:0] read_register_a;
reg [4:0] read_register_b;
reg clock;
reg enable;
reg read_write;
reg reset;
wire [31:0] data_output_a;
wire [31:0] data_output_b;

// Instantiate the Register File
register_file uut (
    .data_input(data_input),
    .write_register(write_register),
    .read_register_a(read_register_a),
    .read_register_b(read_register_b),
    .clock(clock),
    .enable(enable),
    .read_write(read_write),
    .reset(reset),
    .data_output_a(data_output_a),
    .data_output_b(data_output_b)
);

// Clock generation
always begin
    clock = #5 ~clock;
end

// Testbench stimulus
initial begin
    $dumpfile("register_file_tb.vcd");
    $dumpvars(0, register_file_tb);

    // Initialize signals
    reset = 1;
    enable = 1;
    read_write = 1;
    write_register = 0;
    read_register_a = 1;
    read_register_b = 2;
    data_input = 32'hA5A5A5A5;

    // Reset
    #10 reset = 0;

    // Write data to register
    #10 data_input = 32'h12345678;
    write_register = 3;
    read_write = 1;

    // Read data from registers
    #10 read_register_a = 3;
    read_register_b = 4;
    read_write = 0;

    // Add more test cases here

    #100 $finish;
end

// Simulation continues here

endmodule